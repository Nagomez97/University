;******************************************************************************* 
; CALCULA LA CODIFICACION HAMMING EDAC
;*******************************************************************************

; DEFINICION DEL SEGMENTO DE DATOS 

DATOS SEGMENT 

	MATRIZ  DB  1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1,  1,1,0,1,  1,0,1,1,  0,1,1,1
   	RESULT  DB 	7 DUP (0)

DATOS ENDS 


; DEFINICION DEL SEGMENTO DE PILA 

PILA SEGMENT STACK "STACK" 
    DB   40H DUP (0) 
PILA ENDS 


; DEFINICION DEL SEGMENTO EXTRA 

EXTRA     SEGMENT  

	VECTOR  DB	1,0,1,1	
	
EXTRA ENDS 


; DEFINICION DEL SEGMENTO DE CODIGO 

CODE    SEGMENT 
    ASSUME CS:CODE, DS:DATOS, ES: EXTRA, SS:PILA 

; COMIENZO DEL PROCEDIMIENTO PRINCIPAL 

START PROC 
    ;INICIALIZA LOS REGISTROS DE SEGMENTO CON SUS VALORES 
    MOV AX, DATOS 
    MOV DS, AX 

    MOV AX, PILA 
    MOV SS, AX 

    MOV AX, EXTRA 
    MOV ES, AX 

    ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO 
    MOV SP, 64 

    ; FIN DE LAS INICIALIZACIONES 

    ;COMIENZO DEL PROGRAMA 
    
	;INICIALIZAMOS NUESTRO VECTOR
    
    ; RECIBIMOS EL VECTOR EN DX:BX
    MOV DH, NEW_VECTOR[0]
    MOV DL, NEW_VECTOR[1]
    MOV BH, NEW_VECTOR[2]
    MOV BL, NEW_VECTOR[3]
    ; POSTERIORMENTE ESTE CODIGO SERA SUSTITUIDO
    ; POR UNA ENTRADA DESDE TERMINAL

    ; LO CARGAMOS EN VECTOR PARA FACILITAR ACCESO
    MOV VECTOR[0], DH
    MOV VECTOR[1], DL
    MOV VECTOR[2], BH
    MOV VECTOR[3], BL		

    CALL MATMULT ; CALCULAMOS LA MULTIPLICACION

    ; FIN DEL PROGRAMA 
    MOV AX, 4C00H 
    INT 21H 

START ENDP 
;_______________________________________________________________ 
; SUBRUTINA PARA MULTIPLICAR UN VECTOR POR UNA MATRIZ 
; ENTRADA DX:BX -> DATO (POSICION DE MEMORIA)
; SALIDA DX:AX -> RESULTADO (POSICION DE MEMORIA)
;_______________________________________________________________ 

MATMULT PROC NEAR 

    MOV SI, 28 ; ITERA COLUMNAS

BUCLE1:

    MOV CX, 4 ; ITERA FILAS
    SUB SI, 4 ; SIGUIENTE COLUMNA
    MOV DX, 0 ; ALMACENA LA SUMA

BUCLE2:
	DEC CX ; SIGUIENTE ELEMENTO DE LA MATRIZ
	MOV BX, CX 
   	MOV AL, MATRIZ[BX][SI] ; CARGAMOS LA MATRIZ
   	MUL VECTOR[BX] ; MULTIPLICAMOS VECOTOR X MATRIZ
   	ADD DX, AX ; ALMACENAMOS SUMANDO
   	CMP CX, 0
   	JNZ BUCLE2 ; BUCLE EN LA FILAS

   	MOV AX, SI
   	MOV BX, 04H
	DIV Bl ; DIVIDIMOS PARA INDEXAR EL RESULTADO, QUE ALMACENA COCIENTE EN AH, RESTO EN AL
	MOV BX, AX
	MOV RESULTADO[BX], DL ; ALMACENAMOS EL RESULTADO
   	CMP SI, 0
   	JNZ BUCLE1 ; BUCLE EN LAS COLUMNAS

FIN:
   	; SE DEVUELVE LA DIRECCION DE RESULTADO EN DX:AX
   	MOV DX, SEG RESULTADO
   	MOV AX, OFFSET RESULTADO
 
    RET 
MATMULT ENDP 

; FIN DEL SEGMENTO DE CODIGO 
CODE ENDS 
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION 
END START 