;******************************************************************************* 
; CALCULA LA CODIFICACION HAMMING EDAC
;*******************************************************************************

; DEFINICION DEL SEGMENTO DE DATOS 

DATOS SEGMENT 

	MATRIZ  DB  	1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1,  1,1,0,1,  1,0,1,1,  0,1,1,1
    RESULT    DB 	7 DUP (0)

DATOS ENDS 


; DEFINICION DEL SEGMENTO DE PILA 

PILA    SEGMENT STACK "STACK" 
    DB   40H DUP (0) 
PILA ENDS 


; DEFINICION DEL SEGMENTO EXTRA 

EXTRA     SEGMENT  

	VECTOR  DB     	1,0,1,1	
	
EXTRA ENDS 


; DEFINICION DEL SEGMENTO DE CODIGO 

CODE    SEGMENT 
    ASSUME CS:CODE, DS:DATOS, ES: EXTRA, SS:PILA 

; COMIENZO DEL PROCEDIMIENTO PRINCIPAL 

START PROC 
    ;INICIALIZA LOS REGISTROS DE SEGMENTO CON SUS VALORES 
    MOV AX, DATOS 
    MOV DS, AX 

    MOV AX, PILA 
    MOV SS, AX 

    MOV AX, EXTRA 
    MOV ES, AX 

    ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO 
    MOV SP, 64 

    ; FIN DE LAS INICIALIZACIONES 

    ;COMIENZO DEL PROGRAMA 
    
	
	

    ; FIN DEL PROGRAMA 
    MOV AX, 4C00H 
    INT 21H 

START ENDP 
;_______________________________________________________________ 
; SUBRUTINA PARA MULTIPLICAR UN VECTOR POR UNA MATRIZ 
; ENTRADA DX:BX -> DATO (POSICION DE MEMORIA)
; SALIDA DX:AX -> RESULTADO (POSICION DE MEMORIA)
;_______________________________________________________________ 

MATMULT PROC NEAR 

	PUSH ES ; GUARDAMOS DS PREVIO
	
	MOV ES, DX ; ASIGNAMOS DS PARA OBTENER EL DATO
	
	
	MOV SI, 28 ; ITERA COLUMNAS
	
	
BUCLE1:
	MOV BX, 4 ; ITERA FILAS
	SUB SI, 4
	MOV DX, 0
	
BUCLE2:
	DEC BX
	MOV AH, MATRIZ[BX][SI]
	MOV AL, ES:[BX]
	MUL AH ;; MULTIPLICA AH POR AL Y LO GUARDA EN AX
	ADD DX, AX
	CMP BX, 0
	JNZ BUCLE2

	MOV AX, SI
	DIV AX, 4
	MOV RESULTADO[AL], DX
	CMP SI, 0
	JNZ BUCLE1	
	
	POP AX
	MOV ES, AX
	
	MOV DX, DS
	MOV AX, OFFSET RESULTADO

FIN: 
    RET 
MATMULT ENDP 

; FIN DEL SEGMENTO DE CODIGO 
CODE ENDS 
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION 
END START 